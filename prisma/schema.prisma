// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql" // or your database provider
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

model User {
  id       Int      @id @default(autoincrement())
  mdp      String
  nom      String
  prenom   String
  adresse  String?
  email    String @unique
  phone    String?
  role     Role   @default(USER)
  verified Boolean @default(false)
  panier   Panier[]
  orders   PreviousOrder[]
  subscriptions Subscription[]
  stripeCustomerId String? @unique
  payments         Payment[]
  verificationCodes VerificationCode[]
}

model Produit {
  id          Int      @id @default(autoincrement())
  nom         String
  prix        Float
  description String
  quantite    Int
  placement   Int?
  panier      Panier[]
  orders      PreviousOrder[]
  subscriptions Subscription[]
  images      Image[]  
  categorieId Int?
  categorie   Categorie? @relation(fields: [categorieId], references: [id])
}

model Subscription {
  id            Int       @id @default(autoincrement())
  produitId     Int
  userId        Int
  startDate     DateTime  @default(now())
  endDate       DateTime?
  status        String    @default("active") // To track subscription status
  stripeSubId   String?   @unique // Store Stripe subscription ID
  currentPeriodStart DateTime @default(now())
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean  @default(false)
  produit       Produit   @relation(fields: [produitId], references: [id])
  user          User      @relation(fields: [userId], references: [id])
  payments      Payment[] // Opposite relation field for Payment model
  @@index([stripeSubId])
}

model Panier {
  id         Int      @id @default(autoincrement())
  userId     Int
  produitId  Int
  quantite   Int      @default(1)
  user       User     @relation(fields: [userId], references: [id])
  produit    Produit  @relation(fields: [produitId], references: [id])
}

model PreviousOrder {
  id         Int      @id @default(autoincrement())
  userId     Int
  produitId  Int
  quantite   Int
  prixUnitaire Int
  prixTotalPasse  Int
  orderDate  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  produit    Produit  @relation(fields: [produitId], references: [id])
}

model Text {
  id      Int     @id @default(autoincrement())
  content String
}

model Image {
  id        Int      @id @default(autoincrement())
  data      Bytes
  produitId Int?
  produit   Produit? @relation(fields: [produitId], references: [id])
}

model GrilleCategorie {
  id           Int       @id @default(autoincrement())
  categorie1Id Int?
  categorie2Id Int?
  categorie3Id Int?
  categorie1   Categorie? @relation("GrilleCategorie1", fields: [categorie1Id], references: [id])
  categorie2   Categorie? @relation("GrilleCategorie2", fields: [categorie2Id], references: [id])
  categorie3   Categorie? @relation("GrilleCategorie3", fields: [categorie3Id], references: [id])
  active       Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Categorie {
  id              Int              @id @default(autoincrement())
  nom             String
  produits        Produit[]
  grilleCategorie1 GrilleCategorie[] @relation("GrilleCategorie1")
  grilleCategorie2 GrilleCategorie[] @relation("GrilleCategorie2")
  grilleCategorie3 GrilleCategorie[] @relation("GrilleCategorie3")
}

enum ImageType {
  JPEG
  PNG
  WEBP
  GIF
  SVG
}

model CarouselImage {
  id          Int       @id @default(autoincrement())
  data        Bytes
  title       String?
  order       Int       @default(0)
  active      Boolean   @default(true)
  contentType ImageType @default(JPEG)
  createdAt   DateTime  @default(now())
}

model Payment {
  id              Int           @id @default(autoincrement())
  subscriptionId  Int
  userId          Int
  amount          Float
  currency        String       @default("EUR")
  stripePaymentId String       @unique
  status          String
  createdAt       DateTime     @default(now())
  subscription    Subscription @relation(fields: [subscriptionId], references: [id])
  user            User         @relation(fields: [userId], references: [id])
  
  @@index([stripePaymentId])
  @@index([userId])
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  code      String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
  used      Boolean  @default(false)
}